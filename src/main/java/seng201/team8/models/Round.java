package seng201.team8.models;

/**
 * The model for the Round class.
 * <br><br>
 *The round is stored in the GameManager and is changed after
 * every round. Each Round class object holds the different {@link Cart} objects
 * in the round and the maximum distance allowed for the Carts to travel.
 * <br><br>
 * Each Round holds an array of carts called {@link Round#carts} and an integer
 * {@link Round#distanceAllowed}
 * <br><br>
 * Rounds are generated by the RoundSelectorService and the game loop of the round
 * itself is managed by the RoundEvaluationService.
 * <br><br>
 * @see seng201.team8.services.GameManager
 * @see seng201.team8.services.RoundSelectorService
 * @see seng201.team8.services.RoundEvaluationService
 */
public class Round {
    /**
     * The integer representing the maximum distance a {@link Cart} is
     * allowed to travel.
     * <br><br>
     *     If a cart reaches or passes the distance allowed, the round is
     *     considered loss.
     * The set value is 15 and is set upon creation.
     */
    private final int distanceAllowed;
    /**
     * An array containing the different {@link Cart} in the round.
     */
    private final Cart[] carts;

    /**
     * The constructor for a Round
     * <br><br>
     * Takes in an Integer numberOfCarts that determines the length of {@link Round#carts}
     * array and subsequently the number of carts present in the round.
     * @param numberOfCarts An Integer
     */
    public Round(int numberOfCarts){
        carts = new Cart[numberOfCarts];
        this.distanceAllowed = 15;
    }

    /**
     * Getter for the number of carts in the Round
     * @return An Integer
     */
    public int getCartNumber(){
        return carts.length;
    }

    /**
     * Getter for the maximum distance a cart is allowed to
     * travel in a round.
     * @return {@link Round#distanceAllowed}
     */
    public int getDistanceAllowed() {
        return distanceAllowed;
    }

    /**
     * Returns the array containing the carts present in the Round
     * @return {@link Round#carts}
     */
    public Cart[] getCarts() {
        return carts;
    }

    /**
     * Takes in a parameter cart which is the Cart object to be added to the
     * array of carts present in the round.
     * <br><br>
     * Returns a Boolean whether is there any space left in the array
     * {@link Round#carts}
     *
     *
     * @param cart {@link Cart} to be added to the round
     */
    public void addCart(Cart cart){
        for(int i = 0; i < carts.length; i++){
            if(carts[i] == null){
                carts[i] = cart;
                return;
            }
        }
    }

}
